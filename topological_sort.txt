//TOPOLOGICAL SORT
#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTICES 100
// Function to perform DFS and topological sorting
void DFS(int v, int n, int adjMatrix[][MAX_VERTICES], int* visited, int* stack, int* stackIndex) {
visited[v] = 1;
// Recur for all adjacent vertices
for (int i = 0; i < n; i++) {
if (adjMatrix[v][i] && !visited[i]) {
DFS(i, n, adjMatrix, visited, stack, stackIndex);
}
}
// Push current vertex to stack which stores the result
stack[++(*stackIndex)] = v;
}
// Function to perform Topological Sort
void topologicalSort(int n, int adjMatrix[][MAX_VERTICES]) {
int visited[MAX_VERTICES] = {0};
int stack[MAX_VERTICES];
int stackIndex = -1;
// Call the recursive DFS function for all vertices
for (int i = 0; i < n; i++) {
if (!visited[i]) {
DFS(i, n, adjMatrix, visited, stack, &stackIndex);
}
}
// Print contents of stack (topological order)
printf("Topological sorting of the graph: ");
while (stackIndex >= 0) {
printf("%d ", stack[stackIndex--]+1);
}
printf("\n");
}
int main() {
// Number of nodes
int n,edg;
printf("Enter the number of vertices: ");
scanf("%d", &n);
printf("Enter the number of edges : ");
scanf("%d",&edg);
// Adjacency matrix representing the graph
int adjMatrix[MAX_VERTICES][MAX_VERTICES];
for(int i=0;i<n;i++){
for(int j=0;j<n;j++){
adjMatrix[i][j]=0;
}
}
for(int i=0;i<edg;i++){
int u,v;
printf("Enter edge no %d : \n",i+1);
printf("Enter U : ");
scanf("%d",&u);
printf("Enter V : ");
scanf("%d",&v);
adjMatrix[u-1][v-1]=1;
}
// Perform topological sorting
topologicalSort(n, adjMatrix);
return 0;
}
