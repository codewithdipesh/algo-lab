//FOURRIER FAST TRAVERSAL
#include <iostream>
#include <complex>
#include <cmath>
using namespace std;
const double PI = acos(-1);
complex<double>* FFT(complex<double>* S, int N, bool invert)
{
complex<double>* A = new complex<double>[N];
if (N == 1)
{
A[0] = S[0];
return A;
}
else
{
complex<double>* X = new complex<double>[N / 2];
complex<double>* Y = new complex<double>[N / 2];
for (int i = 0; i < N / 2; ++i)
{
X[i] = S[2 * i];
Y[i] = S[2 * i + 1];
}
complex<double>* B = FFT(X, N / 2, invert);
complex<double>* C = FFT(Y, N / 2, invert);
delete[] X;
delete[] Y;
double theta = 2 * PI / N * (invert ? -1 : 1);
complex<double> P(1), W(cos(theta), sin(theta));
for (int r = 0; r < N / 2; ++r)
{
complex<double> term = P * C[r];
A[r] = B[r] + term;
A[r + N / 2] = B[r] - term;
if (invert) {
A[r] /= 2;
A[r + N/2] /= 2;
}
P = P * W;
}
delete[] B;
delete[] C;
return A;
}
}
int main() {
int N;
cout<<"Enter the size : ";
cin>>N;
complex<double> s[N];
cout<<"Enter elements : ";
for(int i=0;i<N;i++){
cin>>s[i];
}
complex<double>* fft_result = FFT(s, N, false);
cout << "\nFFT Result:" << endl;
for (int i = 0; i < N; ++i) {
cout << "X[" << i << "] = " << fft_result[i] << endl;
}
delete[] fft_result;
return 0;
}